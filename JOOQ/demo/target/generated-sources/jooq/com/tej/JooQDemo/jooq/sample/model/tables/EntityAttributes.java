/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.FinanceService;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.EntityAttributesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityAttributes extends TableImpl<EntityAttributesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>finance_service.entity_attributes</code>
     */
    public static final EntityAttributes ENTITY_ATTRIBUTES = new EntityAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityAttributesRecord> getRecordType() {
        return EntityAttributesRecord.class;
    }

    /**
     * The column <code>finance_service.entity_attributes.id</code>.
     */
    public final TableField<EntityAttributesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>finance_service.entity_attributes.entity_id</code>.
     */
    public final TableField<EntityAttributesRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.entity_attributes.attribute_id</code>.
     */
    public final TableField<EntityAttributesRecord, Long> ATTRIBUTE_ID = createField(DSL.name("attribute_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.entity_attributes.display_order</code>.
     */
    public final TableField<EntityAttributesRecord, Long> DISPLAY_ORDER = createField(DSL.name("display_order"), SQLDataType.BIGINT, this, "");

    private EntityAttributes(Name alias, Table<EntityAttributesRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityAttributes(Name alias, Table<EntityAttributesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>finance_service.entity_attributes</code> table reference
     */
    public EntityAttributes(String alias) {
        this(DSL.name(alias), ENTITY_ATTRIBUTES);
    }

    /**
     * Create an aliased <code>finance_service.entity_attributes</code> table reference
     */
    public EntityAttributes(Name alias) {
        this(alias, ENTITY_ATTRIBUTES);
    }

    /**
     * Create a <code>finance_service.entity_attributes</code> table reference
     */
    public EntityAttributes() {
        this(DSL.name("entity_attributes"), null);
    }

    public <O extends Record> EntityAttributes(Table<O> child, ForeignKey<O, EntityAttributesRecord> key) {
        super(child, key, ENTITY_ATTRIBUTES);
    }

    @Override
    public Schema getSchema() {
        return FinanceService.FINANCE_SERVICE;
    }

    @Override
    public Identity<EntityAttributesRecord, Long> getIdentity() {
        return (Identity<EntityAttributesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityAttributesRecord> getPrimaryKey() {
        return Keys.ENTITY_ATTRIBUTES_PKEY;
    }

    @Override
    public List<UniqueKey<EntityAttributesRecord>> getKeys() {
        return Arrays.<UniqueKey<EntityAttributesRecord>>asList(Keys.ENTITY_ATTRIBUTES_PKEY);
    }

    @Override
    public List<ForeignKey<EntityAttributesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EntityAttributesRecord, ?>>asList(Keys.ENTITY_ATTRIBUTES__ENTITY_ATTRIBUTES_ENTITY_ID_FKEY, Keys.ENTITY_ATTRIBUTES__ENTITY_ATTRIBUTES_ATTRIBUTE_ID_FKEY);
    }

    private transient Entity _entity;
    private transient Attribute _attribute;

    public Entity entity() {
        if (_entity == null)
            _entity = new Entity(this, Keys.ENTITY_ATTRIBUTES__ENTITY_ATTRIBUTES_ENTITY_ID_FKEY);

        return _entity;
    }

    public Attribute attribute() {
        if (_attribute == null)
            _attribute = new Attribute(this, Keys.ENTITY_ATTRIBUTES__ENTITY_ATTRIBUTES_ATTRIBUTE_ID_FKEY);

        return _attribute;
    }

    @Override
    public EntityAttributes as(String alias) {
        return new EntityAttributes(DSL.name(alias), this);
    }

    @Override
    public EntityAttributes as(Name alias) {
        return new EntityAttributes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityAttributes rename(String name) {
        return new EntityAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityAttributes rename(Name name) {
        return new EntityAttributes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
