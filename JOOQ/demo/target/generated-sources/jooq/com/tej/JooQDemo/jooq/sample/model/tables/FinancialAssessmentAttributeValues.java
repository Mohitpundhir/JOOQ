/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.FinanceService;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.FinancialAssessmentAttributeValuesRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinancialAssessmentAttributeValues extends TableImpl<FinancialAssessmentAttributeValuesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>finance_service.financial_assessment_attribute_values</code>
     */
    public static final FinancialAssessmentAttributeValues FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES = new FinancialAssessmentAttributeValues();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FinancialAssessmentAttributeValuesRecord> getRecordType() {
        return FinancialAssessmentAttributeValuesRecord.class;
    }

    /**
     * The column <code>finance_service.financial_assessment_attribute_values.id</code>.
     */
    public final TableField<FinancialAssessmentAttributeValuesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>finance_service.financial_assessment_attribute_values.financial_assessment_id</code>.
     */
    public final TableField<FinancialAssessmentAttributeValuesRecord, Long> FINANCIAL_ASSESSMENT_ID = createField(DSL.name("financial_assessment_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>finance_service.financial_assessment_attribute_values.attribute_option_id</code>.
     */
    public final TableField<FinancialAssessmentAttributeValuesRecord, Long> ATTRIBUTE_OPTION_ID = createField(DSL.name("attribute_option_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.financial_assessment_attribute_values.value</code>.
     */
    public final TableField<FinancialAssessmentAttributeValuesRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>finance_service.financial_assessment_attribute_values.target_value</code>.
     */
    public final TableField<FinancialAssessmentAttributeValuesRecord, Double> TARGET_VALUE = createField(DSL.name("target_value"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>finance_service.financial_assessment_attribute_values.entity_attribute_id</code>.
     */
    public final TableField<FinancialAssessmentAttributeValuesRecord, Long> ENTITY_ATTRIBUTE_ID = createField(DSL.name("entity_attribute_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.financial_assessment_attribute_values.input_date</code>.
     */
    public final TableField<FinancialAssessmentAttributeValuesRecord, LocalDate> INPUT_DATE = createField(DSL.name("input_date"), SQLDataType.LOCALDATE, this, "");

    private FinancialAssessmentAttributeValues(Name alias, Table<FinancialAssessmentAttributeValuesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FinancialAssessmentAttributeValues(Name alias, Table<FinancialAssessmentAttributeValuesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>finance_service.financial_assessment_attribute_values</code> table reference
     */
    public FinancialAssessmentAttributeValues(String alias) {
        this(DSL.name(alias), FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES);
    }

    /**
     * Create an aliased <code>finance_service.financial_assessment_attribute_values</code> table reference
     */
    public FinancialAssessmentAttributeValues(Name alias) {
        this(alias, FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES);
    }

    /**
     * Create a <code>finance_service.financial_assessment_attribute_values</code> table reference
     */
    public FinancialAssessmentAttributeValues() {
        this(DSL.name("financial_assessment_attribute_values"), null);
    }

    public <O extends Record> FinancialAssessmentAttributeValues(Table<O> child, ForeignKey<O, FinancialAssessmentAttributeValuesRecord> key) {
        super(child, key, FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES);
    }

    @Override
    public Schema getSchema() {
        return FinanceService.FINANCE_SERVICE;
    }

    @Override
    public Identity<FinancialAssessmentAttributeValuesRecord, Long> getIdentity() {
        return (Identity<FinancialAssessmentAttributeValuesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FinancialAssessmentAttributeValuesRecord> getPrimaryKey() {
        return Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES_PKEY;
    }

    @Override
    public List<UniqueKey<FinancialAssessmentAttributeValuesRecord>> getKeys() {
        return Arrays.<UniqueKey<FinancialAssessmentAttributeValuesRecord>>asList(Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES_PKEY);
    }

    @Override
    public List<ForeignKey<FinancialAssessmentAttributeValuesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FinancialAssessmentAttributeValuesRecord, ?>>asList(Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES__FINANCIAL_ASSESSMENT_ATTRIBUTE_VAL_FINANCIAL_ASSESSMENT_ID_FKEY, Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES__FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES_ATTRIBUTE_OPTION_ID_FKEY, Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES__FINANCIAL_ASSESSMENT_ENTITY_ATTRIBUTE__ENTITY_ATTRIBUTE_ID_FKEY);
    }

    private transient FinancialAssessment _financialAssessment;
    private transient AttributeOptions _attributeOptions;
    private transient EntityAttributes _entityAttributes;

    public FinancialAssessment financialAssessment() {
        if (_financialAssessment == null)
            _financialAssessment = new FinancialAssessment(this, Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES__FINANCIAL_ASSESSMENT_ATTRIBUTE_VAL_FINANCIAL_ASSESSMENT_ID_FKEY);

        return _financialAssessment;
    }

    public AttributeOptions attributeOptions() {
        if (_attributeOptions == null)
            _attributeOptions = new AttributeOptions(this, Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES__FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES_ATTRIBUTE_OPTION_ID_FKEY);

        return _attributeOptions;
    }

    public EntityAttributes entityAttributes() {
        if (_entityAttributes == null)
            _entityAttributes = new EntityAttributes(this, Keys.FINANCIAL_ASSESSMENT_ATTRIBUTE_VALUES__FINANCIAL_ASSESSMENT_ENTITY_ATTRIBUTE__ENTITY_ATTRIBUTE_ID_FKEY);

        return _entityAttributes;
    }

    @Override
    public FinancialAssessmentAttributeValues as(String alias) {
        return new FinancialAssessmentAttributeValues(DSL.name(alias), this);
    }

    @Override
    public FinancialAssessmentAttributeValues as(Name alias) {
        return new FinancialAssessmentAttributeValues(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialAssessmentAttributeValues rename(String name) {
        return new FinancialAssessmentAttributeValues(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialAssessmentAttributeValues rename(Name name) {
        return new FinancialAssessmentAttributeValues(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Double, Double, Long, LocalDate> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
