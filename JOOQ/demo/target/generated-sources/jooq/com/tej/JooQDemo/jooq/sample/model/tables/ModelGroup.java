/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.FinanceService;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.ModelGroupRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelGroup extends TableImpl<ModelGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>finance_service.model_group</code>
     */
    public static final ModelGroup MODEL_GROUP = new ModelGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelGroupRecord> getRecordType() {
        return ModelGroupRecord.class;
    }

    /**
     * The column <code>finance_service.model_group.id</code>.
     */
    public final TableField<ModelGroupRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>finance_service.model_group.name</code>.
     */
    public final TableField<ModelGroupRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>finance_service.model_group.description</code>.
     */
    public final TableField<ModelGroupRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>finance_service.model_group.template_definition_id</code>.
     */
    public final TableField<ModelGroupRecord, Long> TEMPLATE_DEFINITION_ID = createField(DSL.name("template_definition_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.model_group.parent_id</code>.
     */
    public final TableField<ModelGroupRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.model_group.display_order</code>.
     */
    public final TableField<ModelGroupRecord, Long> DISPLAY_ORDER = createField(DSL.name("display_order"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.model_group.default_escalation_rate</code>.
     */
    public final TableField<ModelGroupRecord, BigDecimal> DEFAULT_ESCALATION_RATE = createField(DSL.name("default_escalation_rate"), SQLDataType.NUMERIC(7, 4), this, "");

    private ModelGroup(Name alias, Table<ModelGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelGroup(Name alias, Table<ModelGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>finance_service.model_group</code> table reference
     */
    public ModelGroup(String alias) {
        this(DSL.name(alias), MODEL_GROUP);
    }

    /**
     * Create an aliased <code>finance_service.model_group</code> table reference
     */
    public ModelGroup(Name alias) {
        this(alias, MODEL_GROUP);
    }

    /**
     * Create a <code>finance_service.model_group</code> table reference
     */
    public ModelGroup() {
        this(DSL.name("model_group"), null);
    }

    public <O extends Record> ModelGroup(Table<O> child, ForeignKey<O, ModelGroupRecord> key) {
        super(child, key, MODEL_GROUP);
    }

    @Override
    public Schema getSchema() {
        return FinanceService.FINANCE_SERVICE;
    }

    @Override
    public UniqueKey<ModelGroupRecord> getPrimaryKey() {
        return Keys.MODEL_GROUPS_PKEY;
    }

    @Override
    public List<UniqueKey<ModelGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelGroupRecord>>asList(Keys.MODEL_GROUPS_PKEY);
    }

    @Override
    public List<ForeignKey<ModelGroupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelGroupRecord, ?>>asList(Keys.MODEL_GROUP__FK_TEMPLATE_DEFINITION, Keys.MODEL_GROUP__FK_MODEL_GROUP_SELF);
    }

    private transient TemplateDefinition _templateDefinition;
    private transient ModelGroup _modelGroup;

    public TemplateDefinition templateDefinition() {
        if (_templateDefinition == null)
            _templateDefinition = new TemplateDefinition(this, Keys.MODEL_GROUP__FK_TEMPLATE_DEFINITION);

        return _templateDefinition;
    }

    public ModelGroup modelGroup() {
        if (_modelGroup == null)
            _modelGroup = new ModelGroup(this, Keys.MODEL_GROUP__FK_MODEL_GROUP_SELF);

        return _modelGroup;
    }

    @Override
    public ModelGroup as(String alias) {
        return new ModelGroup(DSL.name(alias), this);
    }

    @Override
    public ModelGroup as(Name alias) {
        return new ModelGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelGroup rename(String name) {
        return new ModelGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelGroup rename(Name name) {
        return new ModelGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, Long, Long, Long, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
