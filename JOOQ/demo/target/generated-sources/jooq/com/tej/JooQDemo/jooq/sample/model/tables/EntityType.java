/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.FinanceService;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.EntityTypeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntityType extends TableImpl<EntityTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>finance_service.entity_type</code>
     */
    public static final EntityType ENTITY_TYPE = new EntityType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityTypeRecord> getRecordType() {
        return EntityTypeRecord.class;
    }

    /**
     * The column <code>finance_service.entity_type.id</code>.
     */
    public final TableField<EntityTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>finance_service.entity_type.name</code>.
     */
    public final TableField<EntityTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>finance_service.entity_type.description</code>.
     */
    public final TableField<EntityTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    private EntityType(Name alias, Table<EntityTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntityType(Name alias, Table<EntityTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>finance_service.entity_type</code> table reference
     */
    public EntityType(String alias) {
        this(DSL.name(alias), ENTITY_TYPE);
    }

    /**
     * Create an aliased <code>finance_service.entity_type</code> table reference
     */
    public EntityType(Name alias) {
        this(alias, ENTITY_TYPE);
    }

    /**
     * Create a <code>finance_service.entity_type</code> table reference
     */
    public EntityType() {
        this(DSL.name("entity_type"), null);
    }

    public <O extends Record> EntityType(Table<O> child, ForeignKey<O, EntityTypeRecord> key) {
        super(child, key, ENTITY_TYPE);
    }

    @Override
    public Schema getSchema() {
        return FinanceService.FINANCE_SERVICE;
    }

    @Override
    public UniqueKey<EntityTypeRecord> getPrimaryKey() {
        return Keys.ENTITY_TYPES_PKEY;
    }

    @Override
    public List<UniqueKey<EntityTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<EntityTypeRecord>>asList(Keys.ENTITY_TYPES_PKEY);
    }

    @Override
    public EntityType as(String alias) {
        return new EntityType(DSL.name(alias), this);
    }

    @Override
    public EntityType as(Name alias) {
        return new EntityType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityType rename(String name) {
        return new EntityType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntityType rename(Name name) {
        return new EntityType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
