/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.FinanceService;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.ModelTemplateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelTemplate extends TableImpl<ModelTemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>finance_service.model_template</code>
     */
    public static final ModelTemplate MODEL_TEMPLATE = new ModelTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelTemplateRecord> getRecordType() {
        return ModelTemplateRecord.class;
    }

    /**
     * The column <code>finance_service.model_template.id</code>.
     */
    public final TableField<ModelTemplateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>finance_service.model_template.name</code>.
     */
    public final TableField<ModelTemplateRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>finance_service.model_template.model_group_id</code>.
     */
    public final TableField<ModelTemplateRecord, Long> MODEL_GROUP_ID = createField(DSL.name("model_group_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.model_template.has_positive_cashflows</code>.
     */
    public final TableField<ModelTemplateRecord, Boolean> HAS_POSITIVE_CASHFLOWS = createField(DSL.name("has_positive_cashflows"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>finance_service.model_template.display_order</code>.
     */
    public final TableField<ModelTemplateRecord, Long> DISPLAY_ORDER = createField(DSL.name("display_order"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.model_template.has_entities</code>.
     */
    public final TableField<ModelTemplateRecord, Boolean> HAS_ENTITIES = createField(DSL.name("has_entities"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>finance_service.model_template.description</code>.
     */
    public final TableField<ModelTemplateRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    private ModelTemplate(Name alias, Table<ModelTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelTemplate(Name alias, Table<ModelTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>finance_service.model_template</code> table reference
     */
    public ModelTemplate(String alias) {
        this(DSL.name(alias), MODEL_TEMPLATE);
    }

    /**
     * Create an aliased <code>finance_service.model_template</code> table reference
     */
    public ModelTemplate(Name alias) {
        this(alias, MODEL_TEMPLATE);
    }

    /**
     * Create a <code>finance_service.model_template</code> table reference
     */
    public ModelTemplate() {
        this(DSL.name("model_template"), null);
    }

    public <O extends Record> ModelTemplate(Table<O> child, ForeignKey<O, ModelTemplateRecord> key) {
        super(child, key, MODEL_TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return FinanceService.FINANCE_SERVICE;
    }

    @Override
    public UniqueKey<ModelTemplateRecord> getPrimaryKey() {
        return Keys.TEMPLATE_MODELS_PKEY1;
    }

    @Override
    public List<UniqueKey<ModelTemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelTemplateRecord>>asList(Keys.TEMPLATE_MODELS_PKEY1);
    }

    @Override
    public List<ForeignKey<ModelTemplateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelTemplateRecord, ?>>asList(Keys.MODEL_TEMPLATE__MODEL_TEMPLATE_MODEL_GROUP_ID_FKEY);
    }

    private transient ModelGroup _modelGroup;

    public ModelGroup modelGroup() {
        if (_modelGroup == null)
            _modelGroup = new ModelGroup(this, Keys.MODEL_TEMPLATE__MODEL_TEMPLATE_MODEL_GROUP_ID_FKEY);

        return _modelGroup;
    }

    @Override
    public ModelTemplate as(String alias) {
        return new ModelTemplate(DSL.name(alias), this);
    }

    @Override
    public ModelTemplate as(Name alias) {
        return new ModelTemplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelTemplate rename(String name) {
        return new ModelTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelTemplate rename(Name name) {
        return new ModelTemplate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, Boolean, Long, Boolean, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
