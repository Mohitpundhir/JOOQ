/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.FinanceService;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.FinancialAssessmentRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinancialAssessment extends TableImpl<FinancialAssessmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>finance_service.financial_assessment</code>
     */
    public static final FinancialAssessment FINANCIAL_ASSESSMENT = new FinancialAssessment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FinancialAssessmentRecord> getRecordType() {
        return FinancialAssessmentRecord.class;
    }

    /**
     * The column <code>finance_service.financial_assessment.id</code>.
     */
    public final TableField<FinancialAssessmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>finance_service.financial_assessment.scenario_id</code>.
     */
    public final TableField<FinancialAssessmentRecord, UUID> SCENARIO_ID = createField(DSL.name("scenario_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>finance_service.financial_assessment.created</code>.
     */
    public final TableField<FinancialAssessmentRecord, LocalDate> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>finance_service.financial_assessment.updated</code>.
     */
    public final TableField<FinancialAssessmentRecord, LocalDate> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>finance_service.financial_assessment.is_baseline</code>.
     */
    public final TableField<FinancialAssessmentRecord, Boolean> IS_BASELINE = createField(DSL.name("is_baseline"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>finance_service.financial_assessment.name</code>.
     */
    public final TableField<FinancialAssessmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>finance_service.financial_assessment.status</code>.
     */
    public final TableField<FinancialAssessmentRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>finance_service.financial_assessment.region</code>.
     */
    public final TableField<FinancialAssessmentRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>finance_service.financial_assessment.template_definition_id</code>.
     */
    public final TableField<FinancialAssessmentRecord, Long> TEMPLATE_DEFINITION_ID = createField(DSL.name("template_definition_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>finance_service.financial_assessment.project_start_date</code>.
     */
    public final TableField<FinancialAssessmentRecord, LocalDate> PROJECT_START_DATE = createField(DSL.name("project_start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>finance_service.financial_assessment.project_end_date</code>.
     */
    public final TableField<FinancialAssessmentRecord, LocalDate> PROJECT_END_DATE = createField(DSL.name("project_end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>finance_service.financial_assessment.construction_start_date</code>.
     */
    public final TableField<FinancialAssessmentRecord, LocalDate> CONSTRUCTION_START_DATE = createField(DSL.name("construction_start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>finance_service.financial_assessment.construction_end_date</code>.
     */
    public final TableField<FinancialAssessmentRecord, LocalDate> CONSTRUCTION_END_DATE = createField(DSL.name("construction_end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>finance_service.financial_assessment.discount_rates</code>.
     */
    public final TableField<FinancialAssessmentRecord, BigDecimal> DISCOUNT_RATES = createField(DSL.name("discount_rates"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>finance_service.financial_assessment.gross_rent_to_net_rent</code>.
     */
    public final TableField<FinancialAssessmentRecord, BigDecimal> GROSS_RENT_TO_NET_RENT = createField(DSL.name("gross_rent_to_net_rent"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>finance_service.financial_assessment.rental_yield</code>.
     */
    public final TableField<FinancialAssessmentRecord, BigDecimal> RENTAL_YIELD = createField(DSL.name("rental_yield"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>finance_service.financial_assessment.yield</code>.
     */
    public final TableField<FinancialAssessmentRecord, Long> YIELD = createField(DSL.name("yield"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.financial_assessment.apartment_area</code>.
     */
    public final TableField<FinancialAssessmentRecord, Double> APARTMENT_AREA = createField(DSL.name("apartment_area"), SQLDataType.DOUBLE, this, "");

    private FinancialAssessment(Name alias, Table<FinancialAssessmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private FinancialAssessment(Name alias, Table<FinancialAssessmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>finance_service.financial_assessment</code> table reference
     */
    public FinancialAssessment(String alias) {
        this(DSL.name(alias), FINANCIAL_ASSESSMENT);
    }

    /**
     * Create an aliased <code>finance_service.financial_assessment</code> table reference
     */
    public FinancialAssessment(Name alias) {
        this(alias, FINANCIAL_ASSESSMENT);
    }

    /**
     * Create a <code>finance_service.financial_assessment</code> table reference
     */
    public FinancialAssessment() {
        this(DSL.name("financial_assessment"), null);
    }

    public <O extends Record> FinancialAssessment(Table<O> child, ForeignKey<O, FinancialAssessmentRecord> key) {
        super(child, key, FINANCIAL_ASSESSMENT);
    }

    @Override
    public Schema getSchema() {
        return FinanceService.FINANCE_SERVICE;
    }

    @Override
    public Identity<FinancialAssessmentRecord, Long> getIdentity() {
        return (Identity<FinancialAssessmentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FinancialAssessmentRecord> getPrimaryKey() {
        return Keys.FINANCIAL_ASSESSMENT_PKEY;
    }

    @Override
    public List<UniqueKey<FinancialAssessmentRecord>> getKeys() {
        return Arrays.<UniqueKey<FinancialAssessmentRecord>>asList(Keys.FINANCIAL_ASSESSMENT_PKEY);
    }

    @Override
    public List<ForeignKey<FinancialAssessmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FinancialAssessmentRecord, ?>>asList(Keys.FINANCIAL_ASSESSMENT__FK_FINANCIALASSESSMENT_TEMPLATEDEFINITIONID);
    }

    private transient TemplateDefinition _templateDefinition;

    public TemplateDefinition templateDefinition() {
        if (_templateDefinition == null)
            _templateDefinition = new TemplateDefinition(this, Keys.FINANCIAL_ASSESSMENT__FK_FINANCIALASSESSMENT_TEMPLATEDEFINITIONID);

        return _templateDefinition;
    }

    @Override
    public FinancialAssessment as(String alias) {
        return new FinancialAssessment(DSL.name(alias), this);
    }

    @Override
    public FinancialAssessment as(Name alias) {
        return new FinancialAssessment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialAssessment rename(String name) {
        return new FinancialAssessment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialAssessment rename(Name name) {
        return new FinancialAssessment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, UUID, LocalDate, LocalDate, Boolean, String, String, String, Long, LocalDate, LocalDate, LocalDate, LocalDate, BigDecimal, BigDecimal, BigDecimal, Long, Double> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
