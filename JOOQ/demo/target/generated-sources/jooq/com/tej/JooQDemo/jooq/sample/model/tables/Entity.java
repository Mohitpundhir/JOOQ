/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.FinanceService;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.EntityRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Entity extends TableImpl<EntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>finance_service.entity</code>
     */
    public static final Entity ENTITY = new Entity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntityRecord> getRecordType() {
        return EntityRecord.class;
    }

    /**
     * The column <code>finance_service.entity.id</code>.
     */
    public final TableField<EntityRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>finance_service.entity.name</code>.
     */
    public final TableField<EntityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>finance_service.entity.description</code>.
     */
    public final TableField<EntityRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>finance_service.entity.level</code>.
     */
    public final TableField<EntityRecord, Long> LEVEL = createField(DSL.name("level"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.entity.parent_id</code>.
     */
    public final TableField<EntityRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.entity.model_template_id</code>.
     */
    public final TableField<EntityRecord, Long> MODEL_TEMPLATE_ID = createField(DSL.name("model_template_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.entity.entity_type_id</code>.
     */
    public final TableField<EntityRecord, Long> ENTITY_TYPE_ID = createField(DSL.name("entity_type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.entity.display_order</code>.
     */
    public final TableField<EntityRecord, Long> DISPLAY_ORDER = createField(DSL.name("display_order"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>finance_service.entity.entity_group</code>.
     */
    public final TableField<EntityRecord, String> ENTITY_GROUP = createField(DSL.name("entity_group"), SQLDataType.VARCHAR, this, "");

    private Entity(Name alias, Table<EntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Entity(Name alias, Table<EntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>finance_service.entity</code> table reference
     */
    public Entity(String alias) {
        this(DSL.name(alias), ENTITY);
    }

    /**
     * Create an aliased <code>finance_service.entity</code> table reference
     */
    public Entity(Name alias) {
        this(alias, ENTITY);
    }

    /**
     * Create a <code>finance_service.entity</code> table reference
     */
    public Entity() {
        this(DSL.name("entity"), null);
    }

    public <O extends Record> Entity(Table<O> child, ForeignKey<O, EntityRecord> key) {
        super(child, key, ENTITY);
    }

    @Override
    public Schema getSchema() {
        return FinanceService.FINANCE_SERVICE;
    }

    @Override
    public Identity<EntityRecord, Long> getIdentity() {
        return (Identity<EntityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntityRecord> getPrimaryKey() {
        return Keys.ENTITY_NEW_PKEY;
    }

    @Override
    public List<UniqueKey<EntityRecord>> getKeys() {
        return Arrays.<UniqueKey<EntityRecord>>asList(Keys.ENTITY_NEW_PKEY);
    }

    @Override
    public List<ForeignKey<EntityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EntityRecord, ?>>asList(Keys.ENTITY__ENTITY_MODEL_TEMPLATE_ID_FKEY, Keys.ENTITY__ENTITY_ENTITY_TYPE_ID_FKEY);
    }

    private transient ModelTemplate _modelTemplate;
    private transient EntityType _entityType;

    public ModelTemplate modelTemplate() {
        if (_modelTemplate == null)
            _modelTemplate = new ModelTemplate(this, Keys.ENTITY__ENTITY_MODEL_TEMPLATE_ID_FKEY);

        return _modelTemplate;
    }

    public EntityType entityType() {
        if (_entityType == null)
            _entityType = new EntityType(this, Keys.ENTITY__ENTITY_ENTITY_TYPE_ID_FKEY);

        return _entityType;
    }

    @Override
    public Entity as(String alias) {
        return new Entity(DSL.name(alias), this);
    }

    @Override
    public Entity as(Name alias) {
        return new Entity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entity rename(String name) {
        return new Entity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entity rename(Name name) {
        return new Entity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Long, Long, Long, Long, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
